// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js" // La salida por defecto es node_modules/@prisma/client
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL") // URL para el cliente de la app (Accelerate)
  directUrl    = env("DIRECT_URL") // URL para migraciones (Directa)
  relationMode = "prisma" // Recomendado para Vercel Postgres
}

// 2. Modelo de Usuario (reemplaza a IUser)
model User {
  id         String        @id @default(cuid()) // CUID es un ID único y seguro
  nombre     String
  email      String        @unique
  rol        Role          @default(usuario)
  telefono   String? // El '?' lo hace opcional
  imagen_url String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relación: Un usuario puede tener muchas reservas
  reservations Reservation[]
}

// 3. Modelo de Habitación (reemplaza a IRoom)
model Room {
  id          Int      @id @default(autoincrement())
  numero      Int      @unique
  tipo        RoomType
  precio      Decimal
  estado      RoomState @default(disponible)
  capacidad   Int
  descripcion String?
  imagen_url  String?
  lat         Float?
  lng         Float?

  // Relación: Una habitación puede estar en muchas reservas
  reservations Reservation[]
}

// 4. Modelo de Reserva (reemplaza a IReservation)
model Reservation {
  id              Int             @id @default(autoincrement())
  fechaEntrada    DateTime
  fechaSalida     DateTime
  huespedes       Int
  precioTotal     Decimal
  estado          ReservationState @default(pendiente)
  pagado          Boolean         @default(false)
  notasEspeciales String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relaciones con llaves foráneas
  usuarioId String
  usuario   User   @relation(fields: [usuarioId], references: [id])

  roomId Int
  room   Room @relation(fields: [roomId], references: [id])
}

// 5. Enums para tipos controlados (más seguro que strings)
enum Role {
  usuario
  operador
}

enum RoomType {
  Simple
  Doble
  Suite
}

enum RoomState {
  disponible
  ocupada
  mantenimiento
}

enum ReservationState {
  pendiente
  confirmada
  cancelada
  completada
}
